#!/usr/bin/env node

/**
 * Script para optimizar im√°genes del proyecto
 * Reduce el tama√±o de las im√°genes para mejorar el rendimiento en dispositivos m√≥viles
 */

const fs = require('fs');
const path = require('path');

// Configuraci√≥n de optimizaci√≥n
const OPTIMIZATION_CONFIG = {
  // Tama√±os m√°ximos recomendados para m√≥viles
  maxWidth: {
    'icon.png': 512,
    'adaptive-icon.png': 512,
    'splash-icon.png': 400,
    'favicon.png': 64,
    'notification-icon.png.png': 128,
    'default': 800
  },
  
  // Calidad de compresi√≥n (0-100)
  quality: 85,
  
  // Formatos preferidos
  preferredFormats: {
    photos: 'webp',
    icons: 'png',
    illustrations: 'svg'
  }
};

function analyzeImageSizes() {
  const assetsDir = path.join(__dirname, '../assets');
  const imageExtensions = ['.png', '.jpg', '.jpeg', '.webp', '.gif'];
  
  console.log('üñºÔ∏è  Analizando tama√±os de im√°genes...\n');
  
  function scanDirectory(dir, relativePath = '') {
    const items = fs.readdirSync(dir);
    
    items.forEach(item => {
      const fullPath = path.join(dir, item);
      const itemRelativePath = path.join(relativePath, item);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory()) {
        scanDirectory(fullPath, itemRelativePath);
      } else if (imageExtensions.includes(path.extname(item).toLowerCase())) {
        const sizeKB = Math.round(stat.size / 1024);
        const sizeCategory = getSizeCategory(sizeKB);
        
        console.log(`${sizeCategory} ${itemRelativePath}: ${sizeKB} KB`);
        
        // Sugerir optimizaciones
        if (sizeKB > 100) {
          suggestOptimization(itemRelativePath, sizeKB);
        }
      }
    });
  }
  
  scanDirectory(assetsDir);
}

function getSizeCategory(sizeKB) {
  if (sizeKB < 10) return 'üü¢';
  if (sizeKB < 50) return 'üü°';
  if (sizeKB < 100) return 'üü†';
  return 'üî¥';
}

function suggestOptimization(imagePath, currentSizeKB) {
  const filename = path.basename(imagePath);
  const maxWidth = OPTIMIZATION_CONFIG.maxWidth[filename] || OPTIMIZATION_CONFIG.maxWidth.default;
  
  console.log(`   üí° Sugerencia: Redimensionar a m√°ximo ${maxWidth}px de ancho`);
  
  if (currentSizeKB > 200) {
    console.log(`   üí° Sugerencia: Comprimir con calidad ${OPTIMIZATION_CONFIG.quality}%`);
  }
  
  if (filename.includes('icon') && !filename.endsWith('.png')) {
    console.log(`   üí° Sugerencia: Convertir a PNG para iconos`);
  }
  
  console.log('');
}

function generateOptimizationReport() {
  console.log('\nüìä Reporte de Optimizaci√≥n de Im√°genes\n');
  console.log('='.repeat(50));
  
  console.log('\nüéØ Recomendaciones Generales:');
  console.log('‚Ä¢ Usar WebP para fotos (reducci√≥n ~30% vs JPEG)');
  console.log('‚Ä¢ Usar PNG solo para iconos y gr√°ficos con transparencia');
  console.log('‚Ä¢ Comprimir im√°genes con herramientas como TinyPNG');
  console.log('‚Ä¢ Implementar lazy loading para im√°genes grandes');
  console.log('‚Ä¢ Usar m√∫ltiples resoluciones (@1x, @2x, @3x)');
  
  console.log('\nüì± Tama√±os Recomendados para M√≥viles:');
  console.log('‚Ä¢ Iconos de app: 512x512px m√°ximo');
  console.log('‚Ä¢ Splash screens: 400x400px m√°ximo');
  console.log('‚Ä¢ Im√°genes de contenido: 800px ancho m√°ximo');
  console.log('‚Ä¢ Favicons: 64x64px');
  console.log('‚Ä¢ Notificaciones: 128x128px');
  
  console.log('\nüîß Herramientas Recomendadas:');
  console.log('‚Ä¢ TinyPNG (tinypng.com) - Compresi√≥n autom√°tica');
  console.log('‚Ä¢ Squoosh (squoosh.app) - Compresi√≥n manual avanzada');
  console.log('‚Ä¢ ImageOptim (macOS) - Optimizaci√≥n local');
  console.log('‚Ä¢ Sharp (Node.js) - Procesamiento program√°tico');
  
  console.log('\n‚ö° Impacto en Rendimiento:');
  console.log('‚Ä¢ Im√°genes optimizadas reducen tiempo de carga inicial');
  console.log('‚Ä¢ Menor uso de memoria en dispositivos con pocos recursos');
  console.log('‚Ä¢ Mejor experiencia de usuario en conexiones lentas');
  console.log('‚Ä¢ Reducci√≥n del tama√±o del bundle de la app');
}

// Ejecutar an√°lisis
console.log('üöÄ Iniciando an√°lisis de optimizaci√≥n de im√°genes...\n');
analyzeImageSizes();
generateOptimizationReport();

console.log('\n‚úÖ An√°lisis completado. Revisa las sugerencias arriba.\n');
